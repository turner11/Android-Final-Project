package com.finalProject.smstranslator;

import java.io.IOException;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import android.content.res.Resources;
import android.content.res.XmlResourceParser;
import android.util.Xml;

public class LanguagesHandler {

	// We don't use namespaces
    private static final String ns = null;
	
	 public static void GetLanguages() {
	    	Resources res = MainActivity.getAppContext().getResources();
	    	XmlResourceParser languagesXml = res.getXml(R.xml.languages);
	    	String s = languagesXml.toString();
	    	
	    	try {
	            XmlPullParser parser = Xml.newPullParser();
	            parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
	            parser.setInput(languagesXml, null);
	            parser.nextTag();
	            return readFeed(parser);
	        } finally {
	            in.close();
	        }
			
			
		}
	 
	 // Parses the contents of an Language. If it encounters an element, hands it off
	// to their respective "read" methods for processing. Otherwise, skips the tag.
	private Language readEntry(XmlPullParser parser) throws XmlPullParserException, IOException {
	    parser.require(XmlPullParser.START_TAG, ns, "entry");
	   
	    String symbol = null;
	    String nativeName = null;
	    String englishName = null;	    
	    boolean isRightToLeft = false;
	    
	    while (parser.next() != XmlPullParser.END_TAG) {
	        if (parser.getEventType() != XmlPullParser.START_TAG) {
	            continue;
	        }
	        String elementName = parser.getName();
	        if (elementName.equals("Symbol")) {
	        	symbol = readElement(parser,elementName);
	        } else if (elementName.equals("NativeName")) {
	        	nativeName = readElement(parser,elementName);
	        } else if (elementName.equals("EnglishName")) {
	        	englishName = readElement(parser,elementName);
	        	
	        } else if (elementName.equals("IsRightToLeft")) {
	        	String strIsRightToLeft = readElement(parser,elementName);
	        }else {
	            skip(parser);
	        }
	    }
	    Language lang =new Language(symbol,nativeName,englishName);
	    lang.setIsRightToLeft(isRightToLeft);
	    return lang;
	}
	
	// Processes title tags in the feed.
	private String readElement(XmlPullParser parser, String tagName) throws IOException, XmlPullParserException {
	    parser.require(XmlPullParser.START_TAG, ns, "title");
	    String title = readText(parser);
	    parser.require(XmlPullParser.END_TAG, ns, "title");
	    return title;
	}
	
	private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {
	    if (parser.getEventType() != XmlPullParser.START_TAG) {
	        throw new IllegalStateException();
	    }
	    int depth = 1;
	    while (depth != 0) {
	        switch (parser.next()) {
	        case XmlPullParser.END_TAG:
	            depth--;
	            break;
	        case XmlPullParser.START_TAG:
	            depth++;
	            break;
	        }
	    }
	 }
	
	// For the tags title and summary, extracts their text values.
	private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {
	    String result = "";
	    if (parser.next() == XmlPullParser.TEXT) {
	        result = parser.getText();
	        parser.nextTag();
	    }
	    return result;
	}

	 
}


